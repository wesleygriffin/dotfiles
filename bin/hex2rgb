#!/usr/bin/env python
# vim: set ft=python
import os.path
import re
import sys
from getopt import getopt

SHORTHEXRE = re.compile("^([a-f\d])([a-f\d])([a-f\d])$", re.IGNORECASE)
LONGHEXRE = re.compile("^([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$", re.IGNORECASE)
def hex2rgb(h, normalize=False, precision=-1):
    h = SHORTHEXRE.sub("\\1\\1\\2\\2\\3\\3", h)
    m = LONGHEXRE.match(h)
    if not m: raise ValueError

    rgb = (int(m.group(1), 16), int(m.group(2), 16), int(m.group(3), 16))
    if normalize:
        rgb = tuple([x/255.0 for x in rgb])
        if precision >= 0:
            rgb = tuple([round(x, precision) for x in rgb])
    return rgb

def usage():
    print "usage:", os.path.basename(sys.argv[0]), "[-n] [- | <hex color value>...]"
    print "    -n    normalize RGB values to (0, 1)"
    print "    hex color values *should not* have a preceding '#'"
    print "    a - indicates read values from standard input"

opts, args = getopt(sys.argv[1:], "p:nh")
normalize = False
precision = -1
for opt, arg in opts:
    if opt in ["-n"]:
        normalize = True
    elif opt in ["-p"]:
        precision = int(arg)
    elif opt in ["-h"]:
        usage()
        sys.exit(1)

if not args:
    usage()
    sys.exit(1)

if args[0] == '-':
  for color in sys.stdin:
      print hex2rgb(color, normalize, precision)
else:
  for color in args:
      print color, "=", hex2rgb(color, normalize, precision)

